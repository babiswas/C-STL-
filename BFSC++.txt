#include<iostream>
#include<list>
using namespace std;


class Graph
{
  int v;
  list<int> *adj;
  public:
    Graph(int v);
    void add_edge(int u,int v);
    void BFS(int s);
};

Graph::Graph(int v)
{
   this->v=v;
   adj=new list<int>[v];
}

void Graph::add_edge(int u,int v)
{
  adj[u].push_back(v);
}

void Graph::BFS(int s)
{
  bool *visited=new bool[v];
  list<int> queue;
  for(int i=0;i<v;i++)
  {
    visited[i]=false;
  }
  visited[s]=true;
  queue.push_back(s);
  while (!queue.empty())
  {
     s=queue.front();
     cout<<s<<endl;
     queue.pop_front();
     list<int>:: iterator i;
     for(i=adj[s].begin();i!=adj[s].end();i++)
     {
       if(visited[*i]==false)
       {
           visited[*i]=true;
           queue.push_back(*i);
       }
     }
  }
}

int main()
{
  Graph g(4);
  g.add_edge(0,2);
  g.add_edge(2,0);
  g.add_edge(0,1);
  g.add_edge(1,2);
  g.add_edge(2,3);
  g.add_edge(3,3);
  g.BFS(2);
}
